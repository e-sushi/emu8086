/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TNode {
    pub next: *mut TNode,
    pub prev: *mut TNode,
    pub parent: *mut TNode,
    pub first_child: *mut TNode,
    pub last_child: *mut TNode,
    pub child_count: ::std::os::raw::c_uint,
    pub debug: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TNode() {
    const UNINIT: ::std::mem::MaybeUninit<TNode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TNode>(),
        56usize,
        concat!("Size of: ", stringify!(TNode))
    );
    assert_eq!(
        ::std::mem::align_of::<TNode>(),
        8usize,
        concat!("Alignment of ", stringify!(TNode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TNode),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TNode),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TNode),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_child) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TNode),
            "::",
            stringify!(first_child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_child) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TNode),
            "::",
            stringify!(last_child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TNode),
            "::",
            stringify!(child_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debug) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TNode),
            "::",
            stringify!(debug)
        )
    );
}
extern "C" {
    pub fn insert_after(target: *mut TNode, node: *mut TNode);
}
extern "C" {
    pub fn insert_before(target: *mut TNode, node: *mut TNode);
}
