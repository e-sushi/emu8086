#![allow(bad_style)] // really dumb
#![allow(unused)] // rust seems to be unable to actually tell when something is used or unused
use std::fs as filesystem;
use fstrings::*;

// because rust is dumb, this macro is used to generate a function that converts integers to enum values
// while the reason for needing this is stupid, i think the fact that this is possible is really cool
// this was generated by chatgpt
macro_rules! enum_from_int {
    ($enum_name:ident { $($variant_name:ident = $variant_value:expr),+ $(,)? }) => {
        enum $enum_name {
            $($variant_name = $variant_value),+
        }

        impl $enum_name {
            fn from_int(value: u16) -> Option<Self> {
                match value {
                    $( $variant_value => Some($enum_name::$variant_name), )+
                    _ => None,
                }
            }
        }
    };
}

enum_from_int! {
    opcode {
        err = 0,
        mov = 0b100010,
    }
}

enum_from_int! {
    reg {
        ax = 0b000,
        cx = 0b001,
        dx = 0b010,
        bx = 0b011,
        sp = 0b100,
        bp = 0b101,
        si = 0b110,
        di = 0b111,
    }
}

fn decode(instr: u16) -> String {
    let out = String::new();
    match opcode::from_int(instr >> 10).unwrap_or(opcode::err) {
        opcode::mov => {
            let D = (instr >> 9) & 1;
            let W = (instr >> 8) & 1;
            
        }
        opcode::err => println!("unknown opcode {instr}")
        
    }
    out
}

fn main() {
    let buffer = {
        // read file
        let res = filesystem::read("data/listing_0039_more_movs");
        if res.is_err() {
            println!("could not open file");
            return;
        }
        // get resulting vec if file is read successfully
        let load = res.unwrap();
        let mut build = String::new();
        println!("{}", build.to_string());
        // instructions are u16, so we need to return a Vec<u16> not Vec<u8>
        let mut out: Vec<u16> = Vec::new();
        for i in (0..load.len()-1).step_by(2) {
            out.push((load[i+1] as u16) | ((load[i] as u16) << 8))
        }
        out
    };
}
